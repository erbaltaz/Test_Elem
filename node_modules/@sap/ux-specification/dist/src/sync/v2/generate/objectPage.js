"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../common");
const utils_1 = require("./utils");
/**
 * Adds the sections to the app schema
 * @param appSchema - app specific schema that potentially gets enhanced
 * @param entitySet - entity set of the actual (object) page
 * @param pages - list of all pages
 * @param entityTypes - entity types, as delivered by parse & merge & convert
 * @param additionalSections - additional sections to merge with
 */
function addSections(appSchema, entitySet, pages, entityTypes, additionalSections) {
    if (!pages) {
        return;
    }
    // Get facet annotations
    const facets = common_1.getObjectPageFacets(entitySet, entityTypes);
    if (!facets) {
        return;
    }
    // Loop on all pages, look for the right entity set
    for (const key in pages) {
        const element = pages[key];
        if (entitySet.includes(element.entitySet)) {
            let facet = {};
            const sections = { ...additionalSections };
            // Loop on all facets (of the given entitySet)
            for (const facetId in facets) {
                facet = facets[facetId];
                if (facetId.includes('LineItem')) {
                    const id = facetId.replace(new RegExp('/@UI.LineItem', 'g'), '::com.sap.vocabularies.UI.v1.LineItem');
                    const navigationProperty = id.split('::')[0];
                    const schemaIdForSections = id.replace(/::/g, '/@');
                    sections[schemaIdForSections] = {
                        $ref: '#/definitions/ObjectPageSectionV2<' + id + '>'
                    };
                    const schemaIdForOpSection = 'ObjectPageSectionV2<' + id + '>';
                    appSchema['definitions'][schemaIdForOpSection] = {
                        type: 'object',
                        properties: {
                            table: {
                                anyOf: [
                                    {
                                        $ref: '#/definitions/ObjectPageResponsiveTable<' + id + '>'
                                    },
                                    {
                                        $ref: '#/definitions/ObjectPageAnalyticalTable<' + id + '>'
                                    },
                                    {
                                        $ref: '#/definitions/ObjectPageGridTable<' + id + '>'
                                    },
                                    {
                                        $ref: '#/definitions/ObjectPageTreeTable<' + id + '>'
                                    }
                                ]
                            }
                        },
                        additionalProperties: false
                    };
                    if (facet['ID'] !== undefined) {
                        appSchema['definitions'][schemaIdForOpSection].title = common_1.FacetTitlePrefix + facet['ID'];
                    }
                    const schemaIdForOpResponsibleTable = 'ObjectPageResponsiveTable<' + id + '>';
                    const schemaIdForOpAnalyticalTable = 'ObjectPageAnalyticalTable<' + id + '>';
                    const schemaIdForOpGridTable = 'ObjectPageGridTable<' + id + '>';
                    const schemaIdForOpTreeTable = 'ObjectPageTreeTable<' + id + '>';
                    appSchema['definitions'][schemaIdForOpResponsibleTable] =
                        appSchema['definitions']['ObjectPageResponsiveTable<GenericColumns>'];
                    appSchema['definitions'][schemaIdForOpResponsibleTable]['properties']['columns']['$ref'] =
                        '#/definitions/' + id;
                    appSchema['definitions'][schemaIdForOpAnalyticalTable] =
                        appSchema['definitions']['ObjectPageResponsiveTable<GenericColumns>'];
                    appSchema['definitions'][schemaIdForOpAnalyticalTable]['properties']['columns']['$ref'] =
                        '#/definitions/' + id;
                    appSchema['definitions'][schemaIdForOpGridTable] =
                        appSchema['definitions']['ObjectPageResponsiveTable<GenericColumns>'];
                    appSchema['definitions'][schemaIdForOpGridTable]['properties']['columns']['$ref'] =
                        '#/definitions/' + id;
                    appSchema['definitions'][schemaIdForOpTreeTable] =
                        appSchema['definitions']['ObjectPageResponsiveTable<GenericColumns>'];
                    appSchema['definitions'][schemaIdForOpTreeTable]['properties']['columns']['$ref'] =
                        '#/definitions/' + id;
                    if (facets) {
                        for (const name in facets) {
                            if (facets[name].base === 'LineItemFacet' && name.includes(navigationProperty)) {
                                utils_1.addLineItemsType(appSchema, facets[name].lineItem, id);
                            }
                        }
                        appSchema['properties']['sections']['$ref'] = '#/definitions/Sections';
                        appSchema['definitions']['Sections'] = {
                            type: 'object',
                            properties: sections,
                            additionalProperties: false
                        };
                    }
                }
            }
        }
        else {
            addSections(appSchema, entitySet, element.pages, entityTypes, additionalSections);
        }
    }
}
/**
 * Resolve page section(get id->key and label->description).
 * 1. Try read 'ID';
 * 2. If there no 'ID', then resolve target and generate id;
 * @param facetDefinition - the actual annotation record
 */
function getSectionFacet(facetDefinition) {
    // Use facet id as first choice
    let key = facetDefinition.ID ? facetDefinition.ID.toString() : '';
    if (!key && 'Target' in facetDefinition) {
        // Fallback when there no facet id - we need contruct key using target object
        const propertyValue = common_1.getAnnotationPropertyValue(facetDefinition.Target);
        const separator = '::';
        const uiVocabulary = 'com.sap.vocabularies.UI.v1';
        const navigationParts = propertyValue.split('/');
        const navigation = navigationParts.length > 1 ? navigationParts[0] : '';
        const uiParts = (navigationParts[1] || navigationParts[0]).split('#');
        const uiClass = uiParts[0];
        const qualifier = uiParts[1] || '';
        key = uiClass.replace('@UI', uiVocabulary);
        if (navigation) {
            key = `${navigation}${separator}${key}`;
        }
        if (qualifier) {
            key = `${key}${separator}${qualifier}`;
        }
    }
    return key
        ? {
            key,
            ...(facetDefinition.Label && { label: facetDefinition.Label.toString() })
        }
        : undefined;
}
exports.getSectionFacet = getSectionFacet;
/**
 * Adds the related facets keys 'enum' to the app schema
 * @param schema - app specific schema that potentially gets enhanced
 * @param entitySet - entity set of the actual (object) page
 * @param entityTypes - entity types, as delivered by parse & merge & convert
 */
function addRelatedFacetKeysType(schema, entitySet, entityTypes) {
    // Find sections from annotation
    // And create new definition in schema as enum with description
    const facetSections = common_1.getObjectPageFacetSection(entitySet, entityTypes, getSectionFacet);
    common_1.addDefinitionForRelatedFacetKeys(schema, ['ObjectPageCustomSectionFragment', 'ObjectPageCustomSectionView'], facetSections);
}
/**
 * Generates an app specific schema out of the generic schema.
 * Generic types are replaced by information from the app specific annotations.
 *
 * @param genericSchema - generic JSON schema of an object page
 * @param entitySet - the base entity type of the given page
 * @param annotations - list of all annotation files (file content plus URI as identifier)
 * @param manifest - manifest.json of the app
 * @param service - service metadata of the app
 *
 * @returns the app specific JSON schema
 */
function generateObjectPageSchemaV2(genericSchema, entitySet, entityTypes, manifest) {
    const appSchema = JSON.parse(JSON.stringify(genericSchema));
    // Generic Sections
    delete appSchema['definitions']['GenericSections'];
    delete appSchema['definitions']['ObjectPageSectionV2<GenericColumns>'];
    delete appSchema['definitions']['GenericColumns'];
    // Custom sections as part of sections
    const additionalSections = {};
    for (const name in appSchema['definitions']['CustomSections'].properties) {
        additionalSections[name] = appSchema['definitions']['CustomSections'].properties[name];
    }
    delete appSchema['definitions']['CustomSections'];
    // Change reference to generated sections
    delete appSchema['properties']['sections']['anyOf'];
    appSchema['properties']['sections']['$ref'] = '#/definitions/Sections';
    // Add sections
    addSections(appSchema, entitySet, manifest['sap.ui.generic.app'].pages, entityTypes, additionalSections);
    delete appSchema['definitions']['ObjectPageTable<GenericColumns>'];
    // Custom Section facets
    addRelatedFacetKeysType(appSchema, entitySet, entityTypes);
    if (!appSchema['definitions']['Sections']) {
        if (appSchema['definitions']['RelatedFacetKeys'] &&
            appSchema['definitions']['RelatedFacetKeys']['oneOf'].length) {
            // If related facets exists - then we need sections definition
            appSchema['definitions']['Sections'] = {
                type: 'object',
                properties: additionalSections,
                additionalProperties: false
            };
        }
        else {
            delete appSchema['properties']['sections'];
        }
    }
    return appSchema;
}
exports.generateObjectPageSchemaV2 = generateObjectPageSchemaV2;
//# sourceMappingURL=objectPage.js.map