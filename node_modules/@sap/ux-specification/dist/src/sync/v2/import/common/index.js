"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const page_1 = require("../../../../specification/common/page");
const table_1 = require("../controls/table");
const common_1 = require("../../../common");
const decorators_1 = require("../../../common/decoration/decorators");
const manifest_1 = require("../../export/manifest");
function convertSelector(selectorId) {
    return selectorId
        .replace(/:2f/g, '/')
        .replace(/:23/g, '#')
        .replace(/:40/g, '@');
}
exports.convertSelector = convertSelector;
function addFlex(config, changeString, jsonSchema) {
    const change = common_1.parseChangeString(changeString);
    const changePropertyKey = change.content.property;
    if (change.controlId.includes(page_1.PageType.ListReport) || change.controlId.includes(page_1.PageType.AnalyticalListPage)) {
        change.controlId = convertSelector(change.controlId);
        if (change.controlType === common_1.ControlType.SmartFilterBar) {
            const schemaProperty = jsonSchema['definitions']['FilterBar'].properties[changePropertyKey];
            if (schemaProperty) {
                config.filterBar[changePropertyKey] = change.content.newValue;
            }
        }
        else if (change.controlType === common_1.ControlType.DynamicPage) {
            config[change.content.property] = change.content.newValue;
        }
        else if (change.controlType === common_1.ControlType.SmartChart) {
            const schemaProperty = jsonSchema['definitions']['ChartSettings'].properties[changePropertyKey];
            if (schemaProperty) {
                config['chart'][changePropertyKey] = change.content.newValue;
            }
        }
        else {
            table_1.addFlexForTable(config.table, change);
        }
    }
}
exports.addFlex = addFlex;
function transferSettingsOfObject(object, manifest, jsonSchema, pageKey) {
    if (!jsonSchema) {
        return;
    }
    let deprecatedProperties = [];
    let manifestSection = {};
    if (object.getDeprecated) {
        deprecatedProperties = object.getDeprecated();
    }
    if (jsonSchema['properties']) {
        for (const key in jsonSchema['properties']) {
            const exportPropertyRule = decorators_1.getExportRuleMetadata(object, key);
            // Version check
            if (exportPropertyRule && exportPropertyRule.manifest) {
                const path = exportPropertyRule.manifest.path([pageKey]);
                manifestSection = manifest_1.getManifestSectionByPathV2(manifest, path);
                if (manifestSection[key]) {
                    object[key] = manifestSection[key];
                }
            }
        }
    }
    // Check for deprecated properties. Assumption: all properties reside in the same manifest section
    if (manifestSection && deprecatedProperties) {
        for (const key in manifestSection) {
            deprecatedProperties.forEach((element) => {
                if (element[key]) {
                    console.log(decorators_1.getTextForDeprecated(key, element[key]));
                }
            });
        }
    }
}
exports.transferSettingsOfObject = transferSettingsOfObject;
function findTableType(manifest, pageKey) {
    if (manifest['sap.ui.generic.app'].pages[pageKey].component.settings.tableSettings) {
        return manifest['sap.ui.generic.app'].pages[pageKey].component.settings.tableSettings['type'];
    }
}
exports.findTableType = findTableType;
//# sourceMappingURL=index.js.map