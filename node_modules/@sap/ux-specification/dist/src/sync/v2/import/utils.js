"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const webapp_1 = require("../../../specification/v2/webapp");
const common_1 = require("../../../specification/common");
const manifest_1 = require("../export/manifest");
function getV2Pages(manifest) {
    return manifest['sap.ui.generic.app'].pages;
}
exports.getV2Pages = getV2Pages;
/**
 * Return the page type for a given page in manifest
 * @param name - page component name
 */
function getPageType(name) {
    return name.split('sap.suite.ui.generic.template.')[1];
}
exports.getPageType = getPageType;
/**
 * Escape logic copied from the V2 StableIdHelper
 * @param sParam - Parameter or value that shall be escaped
 * @returns string - escaped sParam value
 */
function escapeIdParameter(sParam) {
    /* escape all characters not allowed in stable ids with :<hexcode>
     * as we use : as escape character, also escape :
     */
    return sParam.replace(/[^A-Za-z0-9_.-]/g, function (c) {
        const sCode = c.charCodeAt(0).toString(16);
        return ':' + (sCode.length === 1 ? '0' : '') + sCode;
    });
}
exports.escapeIdParameter = escapeIdParameter;
function findObjectPage(v2Pages, entitySet, pageKeys) {
    for (const key in v2Pages) {
        const v2Page = v2Pages[key];
        if (getPageType(v2Page.component.name) === common_1.PageType.ObjectPage && v2Page.entitySet === entitySet) {
            pageKeys.push(key);
            return v2Page;
        }
        else if (v2Page.pages) {
            pageKeys.push(key);
            return findObjectPage(v2Page.pages, entitySet, pageKeys);
        }
    }
}
exports.findObjectPage = findObjectPage;
function findListReportPage(v2Pages, pageKeys) {
    for (const key in v2Pages) {
        const v2Page = v2Pages[key];
        pageKeys.push(key);
        if (getPageType(v2Page.component.name) === common_1.PageType.ListReport) {
            return v2Page;
        }
    }
}
exports.findListReportPage = findListReportPage;
function findAnalyticalListPage(v2Pages, pageKeys) {
    for (const key in v2Pages) {
        const v2Page = v2Pages[key];
        pageKeys.push(key);
        if (getPageType(v2Page.component.name) === common_1.PageType.AnalyticalListPage) {
            return v2Page;
        }
    }
}
exports.findAnalyticalListPage = findAnalyticalListPage;
function findObjectPageinManifest(manifest, entitySet, pageKeys) {
    let listPage = findListReportPage(manifest['sap.ui.generic.app'].pages, pageKeys);
    if (!listPage) {
        // if it is not List Report Page then find ALP
        pageKeys = [];
        listPage = findAnalyticalListPage(manifest['sap.ui.generic.app'].pages, pageKeys);
    }
    const v2ObjectPages = listPage.pages;
    const v2Page = findObjectPage(v2ObjectPages, entitySet, pageKeys);
    return v2Page;
}
exports.findObjectPageinManifest = findObjectPageinManifest;
/**
 * Method which generates id of page according to passed parameters.
 * @param appVersion - Fiori Elements version - V2 or V4.
 * @param pageType - Page type.
 * @param entitySet - Entity Set.
 * @param navigationProperty - Navigation property (optional).
 * @param viewId - Custom page's viewId (optional).
 * @returns {string} Generated page id
 */
function generatePageId(appVersion, pageType, entitySet, navigationProperty, viewId) {
    let parts = [];
    if (appVersion === common_1.FioriElementsVersion.v2) {
        // Page generation for V2 page
        parts.push(pageType);
        if (entitySet) {
            parts.push(entitySet);
        }
        // Page navigation - Optional
        if (navigationProperty) {
            parts.push(navigationProperty);
        }
    }
    else {
        // Page generation for V4 page
        let name = '';
        // Populate with page entity or name
        if (pageType === common_1.PageType.CustomPage) {
            const names = viewId.split('.');
            name = names[names.length - 1];
        }
        else {
            name = entitySet;
        }
        // Populate with page type prefix
        const pageTypeMap = new Map([
            [common_1.PageType.ListReport, 'List'],
            [common_1.PageType.ObjectPage, common_1.PageType.ObjectPage],
            [common_1.PageType.CustomPage, 'Page'],
            [common_1.PageType.ObjectPage, common_1.PageType.ObjectPage]
        ]);
        name += pageTypeMap.get(pageType);
        // Use standard separator for further parts
        parts = [name];
        if (navigationProperty) {
            parts.push(navigationProperty);
        }
    }
    return parts.join('_');
}
exports.generatePageId = generatePageId;
/**
 * Method which finds custom section extensions in manifest for passed entitySet
 * @param manifest - manifest.
 * @param entitySet - Entity set to lookup while searching custom section extensions.
 * @returns {object} Found object with custom sections
 */
function findCustomSectionExtensions(manifest, entitySet) {
    const customSectionViews = manifest_1.getManifestSectionByPathV2(manifest, `sap.ui5/extends/extensions/${webapp_1.SAPUI5_VIEW_EXTENSION}/${webapp_1.SAPUI5_VIEW_EXTENSION_OBJECT_PAGE}`);
    const pageCustomSections = {};
    for (const key in customSectionViews) {
        const keyParts = key.split('|');
        if (keyParts[1] === entitySet) {
            pageCustomSections[key] = customSectionViews[key];
        }
    }
    return pageCustomSections;
}
exports.findCustomSectionExtensions = findCustomSectionExtensions;
//# sourceMappingURL=utils.js.map