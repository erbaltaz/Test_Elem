"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const table_1 = require("../controls/table");
const utils_1 = require("../utils");
const decorators_1 = require("../../../common/decoration/decorators");
const manifest_1 = require("../../export/manifest");
const controls_1 = require("../../export/controls");
const ObjectPage_1 = require("../../export/pages/ObjectPage");
const common_1 = require("../../../common");
function addFlex(config, changeString, entitySet, entityAnnotations) {
    const change = common_1.parseChangeString(changeString);
    if (!change.controlId.includes('sap.suite.ui.generic.template.ObjectPage') ||
        !change.controlId.includes(entitySet)) {
        return;
    }
    let selectorId = change.controlId.split('--')[1];
    const complexIdMatch = new RegExp('.+DataField.+:::sSmartTableId::.+');
    if (complexIdMatch.exec(selectorId) !== null) {
        selectorId = selectorId.split('template:::TableColumn:::')[1];
    }
    const idParts = selectorId.split(':::');
    let id, facetId, facetAnnotations, sectionId;
    if (idParts.length === 1) {
        const lastIdParts = idParts[0].split('-');
        id = lastIdParts[lastIdParts.length - 1];
        if (idParts[0].indexOf('com.sap.vocabularies.UI.v1.LineItem') >= 0 || idParts[0].indexOf('UI.LineItem') >= 0) {
            facetId = lastIdParts[0].replace(/::/g, '/');
            facetId = facetId.substr(0, facetId.lastIndexOf('/'));
        }
        else {
            const idParts = id.split('::');
            if (idParts.length > 1) {
                facetId = idParts[0];
                id = idParts[1];
                sectionId = facetId + '/@' + id;
            }
            else if (lastIdParts[0].indexOf('::') > -1) {
                facetId = lastIdParts[0].split('::')[0];
            }
        }
    }
    else if (selectorId.indexOf('sSmartTableId') >= 0) {
        id = selectorId;
        for (let index = 0; index < idParts.length; index++) {
            const element = idParts[index];
            if (element.startsWith('sSmartTableId')) {
                facetId = element.split('sSmartTableId::')[1].replace(/:3a:3a/g, '/');
                break;
            }
        }
    }
    else {
        facetId = idParts[0];
        id = idParts[1];
        sectionId = facetId + '/@' + id;
    }
    // Create section id
    if (entityAnnotations && 'UI.Facets' in entityAnnotations && facetId) {
        facetAnnotations = entityAnnotations['UI.Facets'];
        for (let index = 0; index < facetAnnotations.length; index++) {
            const facet = facetAnnotations[index];
            if (facet['Target'].indexOf('LineItem') > 0) {
                const convertedTarget = facet['Target'].replace(/@UI.LineItem/g, 'com.sap.vocabularies.UI.v1.LineItem');
                //If Facet id is given, take the target instead for the section key
                if ((facet['ID'] && facetId === facet['ID']) ||
                    (!facet['ID'] && facetId.replace(/:3a:3a/g, '/').indexOf(convertedTarget) >= 0)) {
                    sectionId = convertedTarget.replace(/com.sap.vocabularies.UI.v1.LineItem/g, '@com.sap.vocabularies.UI.v1.LineItem');
                    break;
                }
            }
        }
    }
    if (id.startsWith('Chart')) {
        // no properties yet
    }
    else if ((sectionId && sectionId.indexOf('LineItem') !== -1) || id.indexOf('Table') !== -1) {
        config.sections = {
            [sectionId]: {
                table: {}
            }
        };
        table_1.addFlexForTable(config.sections[sectionId].table, change);
    }
    else {
        //ToDo: why do we have export rules?
        switch (change.content.property) {
            case 'displayShape':
                if (config.header) {
                    config.header.displayShape = change.content.newValue;
                }
                else {
                    config.header = {
                        displayShape: change.content.newValue
                    };
                }
                break;
            case 'alwaysShowContentHeader':
                if (config.layout) {
                    config.layout.alwaysShowContentHeader = change.content.newValue;
                }
                else {
                    config.layout = {
                        alwaysShowContentHeader: change.content.newValue
                    };
                }
                break;
            case 'showAnchorBar':
                if (config.layout) {
                    config.layout.showAnchorBar = change.content.newValue;
                }
                else {
                    config.layout = {
                        showAnchorBar: change.content.newValue
                    };
                }
                break;
            case 'useIconTabBar':
                if (config.layout) {
                    config.layout.useIconTabBar = change.content.newValue;
                }
                else {
                    config.layout = {
                        useIconTabBar: change.content.newValue
                    };
                }
                break;
            default:
                break;
        }
    }
}
// ToDO can be part of utils.ts
function transferSettingsOfObject(object, manifest, jsonSchema, pageKeys, sectionId) {
    if (!jsonSchema) {
        return;
    }
    let deprecatedProperties = [];
    let manifestSection = {};
    if (object.getDeprecated) {
        deprecatedProperties = object.getDeprecated();
    }
    for (const key in jsonSchema['properties'] || jsonSchema) {
        const exportPropertyRule = decorators_1.getExportRuleMetadata(object, key);
        if (exportPropertyRule && exportPropertyRule.manifest) {
            if (sectionId) {
                sectionId = sectionId.replace(new RegExp('/@', 'g'), '::');
            }
            const path = exportPropertyRule.manifest.path(pageKeys, sectionId);
            manifestSection = manifest_1.getManifestSectionByPathV2(manifest, path);
            if (exportPropertyRule.manifest.import) {
                object[key] = exportPropertyRule.manifest.import(manifestSection, sectionId);
            }
            else {
                const manifestKey = exportPropertyRule.manifest.key || key;
                if (manifestKey in manifestSection) {
                    object[key] = manifestSection[manifestKey];
                }
            }
        }
    }
    // Check for deprecated properties. Assumption: all properties reside in the same manifest section
    if (manifestSection) {
        for (const key in manifestSection) {
            if (deprecatedProperties[key]) {
                console.log(decorators_1.getTextForDeprecated(key, deprecatedProperties[key]));
            }
        }
    }
}
function addSettings(objectPageConfig, manifest, settings, jsonSchema, pageKeys, entitySet) {
    transferSettingsOfObject(objectPageConfig, manifest, jsonSchema['properties'], pageKeys);
    objectPageConfig.header = new controls_1.ObjectPageHeader();
    transferSettingsOfObject(objectPageConfig.header, manifest, jsonSchema['definitions']['ObjectPageHeader'], pageKeys);
    objectPageConfig.sections = {};
    if (settings && settings.sections) {
        for (let sectionId in settings.sections) {
            const tableType = settings.sections[sectionId].tableSettings.type;
            let tableIdSchema;
            switch (tableType) {
                case 'AnalyticalTable':
                    tableIdSchema = 'ObjectPageAnalyticalTable<' + sectionId + '>';
                    sectionId = sectionId.replace(/::/g, '/@');
                    objectPageConfig.sections[sectionId] = { table: new controls_1.ObjectPageAnalyticalTable() };
                    transferSettingsOfObject(objectPageConfig.sections[sectionId].table, manifest, jsonSchema['definitions'][tableIdSchema], pageKeys, sectionId);
                    break;
                case 'GridTable':
                    tableIdSchema = 'ObjectPageGridTable<' + sectionId + '>';
                    sectionId = sectionId.replace(/::/g, '/@');
                    objectPageConfig.sections[sectionId] = { table: new controls_1.ObjectPageGridTable() };
                    transferSettingsOfObject(objectPageConfig.sections[sectionId].table, manifest, jsonSchema['definitions'][tableIdSchema], pageKeys, sectionId);
                    break;
                case 'TreeTable':
                    tableIdSchema = 'ObjectPageTreeTable<' + sectionId + '>';
                    sectionId = sectionId.replace(/::/g, '/@');
                    objectPageConfig.sections[sectionId] = { table: new controls_1.ObjectPageTreeTable() };
                    transferSettingsOfObject(objectPageConfig.sections[sectionId].table, manifest, jsonSchema['definitions'][tableIdSchema], pageKeys, sectionId);
                    break;
                default:
                case 'ResponsiveTable':
                    tableIdSchema = 'ObjectPageResponsiveTable<' + sectionId + '>';
                    sectionId = sectionId.replace(/::/g, '/@');
                    objectPageConfig.sections[sectionId] = { table: new controls_1.ObjectPageResponsiveTable() };
                    transferSettingsOfObject(objectPageConfig.sections[sectionId].table, manifest, jsonSchema['definitions'][tableIdSchema], pageKeys, sectionId);
                    break;
            }
        }
    }
    // Find custom sections
    const customSections = utils_1.findCustomSectionExtensions(manifest, entitySet);
    if (Object.keys(customSections).length > 0) {
        objectPageConfig.sections.custom = [];
        for (const sectionId in customSections) {
            const customSection = 'fragmentName' in customSections[sectionId]
                ? new controls_1.ObjectPageCustomSectionFragment()
                : new controls_1.ObjectPageCustomSectionView();
            transferSettingsOfObject(customSection, manifest, jsonSchema['definitions']['fragmentName' in customSections[sectionId]
                ? 'ObjectPageCustomSectionFragment'
                : 'ObjectPageCustomSectionView'], pageKeys, sectionId);
            objectPageConfig.sections.custom.push(customSection);
        }
    }
}
function createObjectPageConfig(manifest, flex, jsonSchema, entitySet, entityAnnotations) {
    const config = new ObjectPage_1.ObjectPage();
    const pageKeys = [];
    const v2Page = utils_1.findObjectPageinManifest(manifest, entitySet, pageKeys);
    if (v2Page) {
        addSettings(config, manifest, v2Page.component.settings, jsonSchema, pageKeys, entitySet);
        flex.forEach((change) => {
            addFlex(config, change, entitySet, entityAnnotations);
        });
    }
    return config;
}
exports.createObjectPageConfig = createObjectPageConfig;
//# sourceMappingURL=objectPage.js.map