import { FacetConfigs, AnnotationData, FacetSection } from './types';
import { FioriElementsVersion, Manifest } from '../../specification/common';
import { EntityType, AnnotationTerm, LineItem, CollectionFacet, ReferenceFacet, ReferenceURLFacet } from '@sap-ux/vocabularies-types';
import { QualifiedName } from '@sap-ux/vocabularies-types/dist/generated/Common';
/**
 * Parses, merges, and converts a list of annotation files with aid of tools from annotation-vocabularies-tools
 * @param annotationFiles
 * @returns the typed entity types with annotations
 */
export declare function parseAndMergeAndConvert(annotationFiles: AnnotationData[]): EntityType[];
export declare const getManifestSectionByPathV4: (exportResultManifest: object, path: string, targetAnnotation?: string, targetAnnotationEncoded?: string) => object;
export declare const getAnnotationPropertyValue: (annotationProperty: any) => string;
/**
 * The function parses the line item annotation and returns a list of keys, one for each record.
 * It simulates the work of the V2 StableIdHelper, as it calculates the last section of the stable ID.
 * Note: no leading 'template:::TableColumn:::' is added for this last section, for easier reading.
 * This corresponds to the import logic at src/sync/v2/import/controls/table.ts.
 * The string 'template:::TableColumn:::' must be added for flex changes during the export.
 *
 * @param annotationTerm - object of the line item annotation
 * @returns items - Array of keys, each representig the last part of the stable id of a line item record
 */
export declare function getLineItemsTyped(annotationTerm: AnnotationTerm<LineItem>): string[];
/**
 * Retrieve facet configurations that can be used to generate ObjectPage schemas
 * @param entitySet - the actual entitySet (corresponds to the given page)
 * @param entityTypes - annotation schema, as delivered by parse & merge & convert
 * @param service - the given service metadata
 */
export declare function getObjectPageFacets(entitySet: QualifiedName, entityTypes: EntityType[]): FacetConfigs;
/**
 * Returns the version of Fiori elements (v2/v4) from a given manifest
 * @param manifest - the manifest.json file
 */
export declare function getVersionFromManifest(manifest: Manifest): FioriElementsVersion;
/**
 * Method adds definition for 'RelatedFacetKeys' as enum with describtion and adds references to 'RelatedFacetKeys' for custom section definitions.
 * @param {object} schema App specific schema that potentially gets enhanced
 * @param {string[]>} sectionDefinitions array of section definitions which should be updated with new reference to 'RelatedFacetKeys' enum.
 * @param {FacetSection[]} facetSections Array of facet section objects which is used to generate enum values.
 */
export declare function addDefinitionForRelatedFacetKeys(schema: object, sectionDefinitions: string[], facetSections: FacetSection[]): void;
/**
 * Retrieve page section data(so far id/key and label/description).
 * @param {QualifiedName} entitySet The actual entitySet (corresponds to the given page)
 * @param {EntityType[]} entityTypes Entity types, as delivered by parse & merge & convert
 * @param {Function} resolve Resolver method. Specific method passed from outside, because V2 and V4 have different logic to resolve ids/keys.
 * @return {FacetSection[]} Array of FacetSection objects.
 */
export declare function getObjectPageFacetSection(entitySet: QualifiedName, entityTypes: EntityType[], resolve: (facetDefinition: AnnotationTerm<CollectionFacet> | AnnotationTerm<ReferenceFacet> | AnnotationTerm<ReferenceURLFacet>, index: number) => FacetSection | undefined): FacetSection[];
export declare const deleteEmptyStructure: (manifest: object, path: string) => void;
