"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const page_1 = require("../../specification/common/page");
const types_1 = require("./types");
class AppProvider {
    constructor(manifest, schemas, home, pages, version, settings) {
        // Store controller names which should be handled latelly
        this.unhandledControllers = [];
        this.app = {
            $schema: `./${types_1.DirName.Schemas}/App.json`,
            id: manifest['sap.app'].id,
            pages,
            home,
            target: {
                fioriElements: version,
                odata: version === page_1.FioriElementsVersion.v2 ? page_1.OdataVersion.v2 : page_1.OdataVersion.v4
            },
            ...(settings && { settings })
        };
        this.schemas = schemas;
    }
    /**
     * Create config files for app (app.json) and pages (pages/{name}.json).
     * This is basically a copy of createFiles optimized to be used in FTFS:
     * - always use posix path notation with forward slash (/)
     * - return app and page files as separate objects
     */
    createConfigFiles() {
        const pageConfigs = {};
        const appConfig = {};
        // add schema reference to all pages
        for (const pageId in this.app.pages) {
            if (this.app.pages[pageId].config) {
                const name = `${this.app.pages[pageId].pageType}_${this.app.pages[pageId].entitySet}`;
                const config = this.app.pages[pageId].config;
                if (this.schemas[`${name}Type.json`]) {
                    config.$schema = `../${types_1.DirName.Schemas}/${name}Type.json`;
                }
                else {
                    config.$schema = `../${types_1.DirName.Schemas}/${this.app.pages[pageId].pageType}Type.json`;
                }
                pageConfigs[`${types_1.DirName.Pages}/${pageId}.json`] = config;
            }
        }
        // remove config before converting to JSON
        const app = JSON.parse(JSON.stringify(this.app));
        for (const pageId in app.pages) {
            delete app.pages[pageId].config;
        }
        appConfig[types_1.FileName.App] = app;
        return { appConfig, pageConfigs };
    }
}
exports.AppProvider = AppProvider;
//# sourceMappingURL=appProvider.js.map