"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pages_1 = require("./pages");
const controls_1 = require("./controls");
const common_1 = require("../../common");
const v4_1 = require("../../../v4");
const application_1 = require("../application");
const manifest_1 = require("./manifest");
const flexibleColumnLayout_1 = require("./flexibleColumnLayout");
const utils_1 = require("../../common/utils");
/**
 * Return the skeleton of a exportResultManifest's "sap.ui.generic.app" entry, prefilled with some values
 * @param name - name of the template, e.g. "sap.suite.ui.generic.template.ObjectPage"
 * @param entitySet - the main entity set
 * @param navigationProperty - navigation property
 */
const getV4ManifestPageTemplate = (name, entitySet) => {
    const V4Page = {
        type: 'Component',
        id: '',
        name: name,
        options: {
            settings: {
                entitySet: entitySet,
                navigation: {},
                controlConfiguration: {}
            }
        }
    };
    return V4Page;
};
const defaultExportResult = {
    flexChanges: [],
    manifest: {
        'sap.ui5': {
            flexEnabled: true,
            routing: {
                targets: {}
            }
        },
        'sap.app': {}
    }
};
/**
 * Recursive function that traverses the content of the current object. It reads decorators and fills exportResultManifest entries and flex changes
 * @param object - current object to traverse
 * @param parentIds - array of collected parent ids
 * @param stableIdParts - list of parts of the stable ID for flex changes
 * @param breadcrumbs - array of sequence of properties that we are currently processing. Required for instance for table column name
 * @param exportResults - result object with all collected exportResultManifest entries and flex changes
 * @param appId - id of the Fiori elements app, which is usually namespace.appid
 * @param baseId - selector id of the current page
 * @param pageName - array comprising the page name
 * @param jsonSchema - application specific schema
 * @param targetDefinition - the current entry point or definition in the app schema
 */
function transferManifestEntriesAndFlexChange(fullManifest, object, parentIds, stableIdParts, breadcrumbs, exportResults, appId, baseId, pageName, jsonSchema, targetDefinition) {
    if (targetDefinition && targetDefinition['properties']) {
        for (const key in targetDefinition['properties']) {
            const childId = common_1.getChildId(object, key);
            const ids = childId ? [...parentIds, childId] : [...parentIds, key];
            const localIdParts = childId ? [...stableIdParts, childId] : stableIdParts;
            const exportPropertyRule = common_1.getExportRuleMetadata(object, key);
            if (exportPropertyRule) {
                if (exportPropertyRule.flex) {
                    const flexChange = {
                        controlId: exportPropertyRule.flex.controlId(baseId, localIdParts, breadcrumbs),
                        controlType: exportPropertyRule.flex.controlType(),
                        content: {
                            property: key,
                            newValue: object[key]
                        }
                    };
                    exportResults.flexChanges.push(exportPropertyRule.flex.exportFunction(flexChange, fullManifest));
                }
                else if (exportPropertyRule.manifest) {
                    let targetAnnotation = '', targetAnnotationEncoded = '', custom = false;
                    if (ids[0] === 'sections') {
                        if (ids[1] === 'custom' && ids[2] !== ids[ids.length - 1]) {
                            custom = true;
                            targetAnnotationEncoded = ids[2];
                        }
                        else {
                            targetAnnotation = ids[1];
                            targetAnnotationEncoded = targetAnnotation && targetAnnotation.replace('/', '::');
                        }
                    }
                    let path = exportPropertyRule.manifest.path(pageName, targetAnnotationEncoded);
                    const manifestSection = common_1.getManifestSectionByPathV4(exportResults.manifest, path, targetAnnotation, custom ? undefined : targetAnnotationEncoded);
                    const manifestKey = exportPropertyRule.manifest.key || key;
                    if (object[key] !== undefined) {
                        const exportHandler = exportPropertyRule.manifest.export;
                        if (exportHandler !== false) {
                            if (exportHandler && typeof exportHandler === 'function') {
                                exportHandler(manifestSection, object);
                            }
                            else {
                                manifestSection[manifestKey] = object[key];
                            }
                        }
                    }
                    else if (manifestSection[manifestKey]) {
                        delete manifestSection[manifestKey];
                    }
                    while (path.indexOf('/') > 0) {
                        utils_1.deleteEmptyStructure(exportResults.manifest, path);
                        path = path.slice(0, path.lastIndexOf('/'));
                    }
                }
            }
            if (object[key] && typeof object[key] === 'object' && targetDefinition['properties'][key]) {
                let objects = [];
                let ref = '';
                let isArray = false;
                if (targetDefinition['properties'][key].$ref) {
                    ref = targetDefinition['properties'][key].$ref;
                    objects.push(object[key]);
                }
                else if (targetDefinition['properties'][key].type === 'array') {
                    ref = targetDefinition['properties'][key].items && targetDefinition['properties'][key].items.$ref;
                    objects = object[key];
                    isArray = true;
                }
                if (ref) {
                    for (const innerObject of objects) {
                        const definitionArray = ref.split('#/definitions/');
                        const nextTargetDefinition = jsonSchema['definitions'][definitionArray[definitionArray.length - 1]];
                        const additionalIds = [];
                        if (breadcrumbs[0] === 'sections' && key === 'custom' && isArray) {
                            // We need add custom section 'id' into breadcrumbs to retrieve correct path to manifest
                            additionalIds.push(innerObject['id']);
                        }
                        transferManifestEntriesAndFlexChange(fullManifest, innerObject, [...ids, ...additionalIds], localIdParts, [...breadcrumbs, key], exportResults, appId, baseId, pageName, jsonSchema, nextTargetDefinition);
                    }
                }
            }
        }
    }
}
/**
 * Run through the given ObjectPage config and return respective exportResultManifest entry and flex changes
 * @param appId - id of the Fiori elements app, which is usually namespace.appid
 * @param objectPageConfig - content of the src/ObjectPage_<entity_set>.json file
 * @param manifest - manifest of the application
 * @param pageName - routing target defined in manfiest
 */
exports.exportObjectPage = (appId, objectPageConfig, manifest, pageName, jsonSchema) => {
    const exportResults = defaultExportResult;
    exportResults.manifest = manifest;
    const objectPage = Object.assign(new pages_1.ObjectPage(), objectPageConfig);
    objectPage.header = Object.assign(new controls_1.ObjectPageHeader(), objectPage.header);
    objectPage.layout = Object.assign(new controls_1.ObjectPageLayout(), objectPage.layout);
    const pageLayoutInformation = common_1.getPageLayoutInformation(objectPage);
    const baseId = `${appId}::${pageLayoutInformation.id}::${pageName[0]}--`;
    if (objectPageConfig && objectPageConfig.sections) {
        for (const sectionId in objectPageConfig.sections) {
            if (objectPage.sections[sectionId] && objectPage.sections[sectionId].table) {
                objectPage.sections[sectionId].table = Object.assign(new controls_1.ObjectPageTable(), objectPage.sections[sectionId].table);
            }
            else if (sectionId === 'custom' && Array.isArray(objectPageConfig.sections[sectionId])) {
                const customSections = objectPageConfig.sections
                    .custom;
                for (const index in customSections) {
                    customSections[index] = Object.assign(new controls_1.ObjectPageCustomSectionFragment(), customSections[index]);
                }
            }
        }
    }
    transferManifestEntriesAndFlexChange(JSON.parse(JSON.stringify(manifest)), objectPage, [], //no parentIds
    [], // no stableIds
    [], // no breadcrumbs
    exportResults, appId, baseId, pageName, jsonSchema, jsonSchema //starting point for target definition
    );
    return exportResults;
};
/**
 * Run through the given ListReport config and return respective exportResultManifest entry and flex changes
 * @param appId - id of the Fiori elements app, which is usually namespace.appid
 * @param listReportConfig - content of the src/ListReport_<entity_set>.json file
 * @param pageName - routing target defined in manifest
 */
exports.exportListReportPage = (appId, listReportConfig, manifest, pageName, jsonSchema) => {
    const exportResults = defaultExportResult;
    exportResults.manifest = manifest;
    const listReport = Object.assign(new pages_1.ListReport(), listReportConfig);
    // when assigning a JSON structure to an object structure we need to assign all children, otherwise decorators will not exist
    // find a better way to do this generically, perhaps using the schema?
    listReport.table = Object.assign(new controls_1.Table(), listReport.table);
    const pageLayoutInformation = common_1.getPageLayoutInformation(listReport);
    const baseId = `${appId}::${pageLayoutInformation.id}::${pageName[0]}--`;
    if (!exportResults.manifest['sap.ui5']['routing']['targets'][pageName[0]]) {
        const newV4Page = getV4ManifestPageTemplate(pageLayoutInformation.pageId, pageName[0]);
        exportResults.manifest['sap.ui5']['routing']['targets'][pageName[0]] = newV4Page;
    }
    transferManifestEntriesAndFlexChange(JSON.parse(JSON.stringify(manifest)), listReport, [], //no parentIds
    [], // no stableIds
    [], // no breadcrumbs
    exportResults, appId, baseId, pageName, jsonSchema, jsonSchema //starting point for target definition
    );
    return exportResults;
};
exports.exportPageV4 = (appId, page, manifest, jsonSchema) => {
    switch (page.pageType) {
        case v4_1.PageType.ObjectPage: {
            return exports.exportObjectPage(appId, page.config, manifest, [page.name], jsonSchema);
        }
        case v4_1.PageType.ListReport: {
            return exports.exportListReportPage(appId, page.config, manifest, [page.name], jsonSchema);
        }
    }
};
exports.exportApplicationV4 = (application, manifest, jsonSchema) => {
    const exportResults = defaultExportResult;
    exportResults.manifest = manifest;
    const applicationV4 = Object.assign(new application_1.ApplicationV4(), application);
    //transform application settings
    applicationV4.settings = Object.assign(new application_1.AppSettings(), applicationV4.settings);
    for (const key in jsonSchema['definitions']['AppSettings']['properties']) {
        const exportPropertyRule = common_1.getExportRuleMetadata(applicationV4.settings, key);
        if (exportPropertyRule && exportPropertyRule.manifest) {
            const path = exportPropertyRule.manifest.path();
            const manifestSection = common_1.getManifestSectionByPathV4(exportResults.manifest, path);
            manifestSection[key] = applicationV4.settings[key];
        }
    }
    //transform routing
    exportResults.manifest['sap.ui5'].routing = manifest_1.transformRoutingV4(application['home'], application['pages'], manifest);
    // Update FCL data
    flexibleColumnLayout_1.updateFcl(manifest['sap.ui5'], application);
    return exportResults;
};
//# sourceMappingURL=export.js.map