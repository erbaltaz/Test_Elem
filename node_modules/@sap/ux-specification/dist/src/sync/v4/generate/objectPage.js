"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../common");
/**
 * Generate facet configurations that can be used to generate ObjectPage schemas
 * @param facetAnnotations UI.Facet annotations for a specific entity
 */
function getSectionIds(entitySet, pages, entityTypes) {
    let sectionIdsManifest = [];
    const sectionIdsAnnotation = [];
    Object.keys(pages).forEach((element) => {
        if (pages[element].options &&
            pages[element].options.settings &&
            pages[element].options.settings.controlConfiguration &&
            pages[element].options.settings.entitySet === entitySet &&
            pages[element].name === 'sap.fe.templates.ObjectPage') {
            sectionIdsManifest = Object.keys(pages[element].options.settings.controlConfiguration);
        }
    });
    const facets = common_1.getObjectPageFacets(entitySet, entityTypes);
    Object.keys(facets).forEach((id) => {
        sectionIdsAnnotation.push(id.replace(new RegExp('/@UI.LineItem', 'g'), '/@com.sap.vocabularies.UI.v1.LineItem'));
    });
    const sectiondIds = { ...sectionIdsManifest, ...sectionIdsAnnotation };
    return Object.values(sectiondIds);
}
function addSectionsType(fileContent, entitySet, pages, entityTypes, additionalSections) {
    Object.keys(pages).forEach((element) => {
        if (pages[element].options.settings.entitySet === entitySet &&
            pages[element].name === 'sap.fe.templates.ObjectPage') {
            const sectiondIds = getSectionIds(entitySet, pages, entityTypes);
            const sections = { ...(additionalSections ? additionalSections : {}) };
            sectiondIds.forEach((id) => {
                sections[id] = {
                    $ref: '#/definitions/ObjectPageSection'
                };
            });
            fileContent['definitions']['Sections'] = {
                type: 'object',
                properties: sections,
                additionalProperties: false
            };
        }
    });
}
/**
 * Resolve page section(get id->key and label->description).
 * Method resolves section key using logic copied from 'sap.fe'(method 'getSectionFacet').
 * @param {AnnotationTerm} facetDefinition The actual annotation record.
 * @param {number} index Index of facet - is used as callback id.
 * @return {FacetSection} FacetSection object.
 */
function getSectionFacet(facetDefinition, index) {
    const facetSection = {
        key: facetDefinition.ID
            ? facetDefinition.ID.toString()
            : facetDefinition.Label
                ? facetDefinition.Label.toString()
                : index.toString(),
        ...(facetDefinition.Label && { label: facetDefinition.Label.toString() })
    };
    return facetSection;
}
exports.getSectionFacet = getSectionFacet;
/**
 * Adds the related facets keys 'enum' to the app schema
 * @param {object} schema App specific schema that potentially gets enhanced
 * @param {string} entitySet Entity set of the actual (object) page
 * @param {SapUiAppPageV4[]} pages List of all pages
 * @param {EntityType[]} entityTypes Entity types, as delivered by parse & merge & convert
 */
function addRelatedFacetKeysType(schema, entitySet, pages, entityTypes) {
    Object.keys(pages).forEach((element) => {
        if (pages[element].options.settings.entitySet === entitySet &&
            pages[element].name === 'sap.fe.templates.ObjectPage') {
            // Find sections from annotation
            const facetSections = common_1.getObjectPageFacetSection(entitySet, entityTypes, getSectionFacet);
            // Find custom sections ids from manifest
            const page = pages[element];
            if (page.options &&
                page.options.settings &&
                page.options.settings.content &&
                page.options.settings.content.body &&
                page.options.settings.content.body.sections) {
                Object.keys(page.options.settings.content.body.sections).forEach(function (key) {
                    // Just in case - avoid duplications
                    if (!facetSections.find((section) => section.key === key)) {
                        facetSections.push({
                            key,
                            custom: true
                        });
                    }
                });
            }
            // Update schema definition
            common_1.addDefinitionForRelatedFacetKeys(schema, ['ObjectPageCustomSectionFragment'], facetSections);
        }
    });
}
function generateObjectPageSchemaV4(genericSchema, entitySet, entityTypes, manifest) {
    delete genericSchema['definitions']['GenericSections'];
    // Custom sections as part of sections
    const additionalSections = {};
    if (genericSchema['definitions']['CustomSections']) {
        for (const name in genericSchema['definitions']['CustomSections'].properties) {
            additionalSections[name] = genericSchema['definitions']['CustomSections'].properties[name];
        }
    }
    // Change reference to generated sections
    delete genericSchema['properties']['sections']['anyOf'];
    genericSchema['properties']['sections']['$ref'] = '#/definitions/Sections';
    addSectionsType(genericSchema, entitySet, manifest['sap.ui5'].routing.targets, entityTypes, additionalSections);
    // Custom Section facets
    addRelatedFacetKeysType(genericSchema, entitySet, manifest['sap.ui5'].routing.targets, entityTypes);
    if (!genericSchema['definitions']['Sections'] &&
        genericSchema['definitions']['RelatedFacetKeys'] &&
        genericSchema['definitions']['RelatedFacetKeys']['oneOf'].length) {
        // If related facets exists - then we need sections definition
        genericSchema['definitions']['Sections'] = {
            type: 'object',
            properties: additionalSections,
            additionalProperties: false
        };
    }
    return genericSchema;
}
exports.generateObjectPageSchemaV4 = generateObjectPageSchemaV4;
//# sourceMappingURL=objectPage.js.map